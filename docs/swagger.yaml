basePath: /
definitions:
  exusiai_dev_backend-next_internal_model_v2.Item:
    properties:
      alias:
        items:
          type: string
        type: array
      existence:
        type: object
      groupID:
        type: string
      itemId:
        type: string
      itemType:
        type: string
      name:
        type: string
      name_i18n:
        type: object
      pron:
        items:
          type: string
        type: array
      rarity:
        type: integer
      sortId:
        type: integer
      spriteCoord:
        items:
          type: integer
        type: array
    type: object
  exusiai_dev_backend-next_internal_model_v2.SiteStats:
    properties:
      totalApCost:
        type: integer
      totalItemQuantities:
        items:
          $ref: '#/definitions/v2.TotalItemQuantity'
        type: array
      totalStageTimes:
        items:
          $ref: '#/definitions/v2.TotalStageTime'
        type: array
      totalStageTimes_24h:
        items:
          $ref: '#/definitions/v2.TotalStageTime'
        type: array
    type: object
  exusiai_dev_backend-next_internal_model_v2.Stage:
    properties:
      apCost:
        example: 6
        type: integer
      code:
        example: 1-7
        type: string
      code_i18n:
        type: object
      dropInfos:
        items:
          $ref: '#/definitions/v2.DropInfo'
        type: array
      existence:
        type: object
      isGacha:
        example: false
        type: boolean
      minClearTime:
        example: 118000
        type: integer
      recognitionOnly:
        items:
          type: string
        type: array
      stageId:
        example: main_01-07
        type: string
      stageType:
        description: |-
          StageType is the type of the stage
          * MAIN - Mainline Stages
          * SUB - Sub Stages
          * ACTIVITY - Activity Stages
          * DAILY - Daily Stages
        enum:
        - MAIN
        - SUB
        - ACTIVITY
        - DAILY
        example: MAIN
        type: string
      zoneId:
        example: main_1
        type: string
    type: object
  exusiai_dev_backend-next_internal_model_v2.Zone:
    properties:
      background:
        type: string
      existence:
        type: object
      stages:
        items:
          type: string
        type: array
      subType:
        type: string
      type:
        type: string
      zoneId:
        type: string
      zoneIndex:
        type: integer
      zoneName:
        type: string
      zoneName_i18n:
        type: object
    type: object
  model.Existence:
    properties:
      CN:
        allOf:
        - $ref: '#/definitions/model.ServerExistence'
        description: 'CN: 国服 Mainland China Server (maintained by Hypergryph Network
          Technology Co., Ltd.)'
      JP:
        allOf:
        - $ref: '#/definitions/model.ServerExistence'
        description: 'JP: 日服 Japan Server (maintained by Yostar Inc,.)'
      KR:
        allOf:
        - $ref: '#/definitions/model.ServerExistence'
        description: 'KR: 韩服 Korea Server (maintained by Yostar Limited)'
      US:
        allOf:
        - $ref: '#/definitions/model.ServerExistence'
        description: 'US: 美服/国际服 Global Server (maintained by Yostar Limited)'
    required:
    - CN
    - JP
    - KR
    - US
    type: object
  model.I18nString:
    properties:
      en:
        description: 'EN: English (en)'
        type: string
      ja:
        description: 'JP: 日本語 (ja)'
        type: string
      ko:
        description: 'KR: 한국어 (ko)'
        type: string
      zh:
        description: 'ZH: 中文 (zh-CN)'
        type: string
    required:
    - en
    - ja
    - ko
    - zh
    type: object
  model.Notice:
    properties:
      content_i18n:
        items:
          type: integer
        type: array
      existence:
        type: object
      id:
        type: integer
      severity:
        type: integer
    type: object
  model.ServerExistence:
    properties:
      closeTime:
        example: 1635966000000
        type: integer
      exist:
        example: true
        type: boolean
      openTime:
        example: 1634799600000
        type: integer
    required:
    - exist
    type: object
  pgerr.PenguinError:
    properties:
      code:
        example: INVALID_REQUEST
        type: string
      message:
        example: 'invalid request: some or all request parameters are invalid'
        type: string
    type: object
  types.AdvancedQuery:
    properties:
      end:
        type: integer
      interval:
        type: integer
      isPersonal:
        type: boolean
      itemIds:
        items:
          type: string
        type: array
      server:
        type: string
      sourceCategory:
        type: string
      stageId:
        type: string
      start:
        type: integer
    required:
    - server
    - stageId
    type: object
  types.AdvancedQueryRequest:
    properties:
      queries:
        items:
          $ref: '#/definitions/types.AdvancedQuery'
        maxItems: 5
        minItems: 1
        type: array
    required:
    - queries
    type: object
  types.ArkDrop:
    properties:
      dropType:
        enum:
        - REGULAR_DROP
        - NORMAL_DROP
        - SPECIAL_DROP
        - EXTRA_DROP
        - FURNITURE
        type: string
      itemId:
        example: "30013"
        type: string
      quantity:
        maximum: 1000
        minimum: 0
        type: integer
    required:
    - dropType
    - itemId
    - quantity
    type: object
  types.ReportRequestMetadata:
    properties:
      fileName:
        maxLength: 512
        type: string
      fingerprint:
        maxLength: 128
        type: string
      lastModified:
        type: integer
      md5:
        maxLength: 32
        type: string
      recognizerAssetsVersion:
        maxLength: 32
        type: string
      recognizerVersion:
        maxLength: 32
        type: string
    type: object
  types.SingularReportRecallRequest:
    properties:
      reportHash:
        example: cahbuch1eqliv7dopen0-5ejlUrfzNMXNHY6Q
        type: string
    required:
    - reportHash
    type: object
  types.SingularReportRequest:
    properties:
      drops:
        items:
          $ref: '#/definitions/types.ArkDrop'
        type: array
      metadata:
        $ref: '#/definitions/types.ReportRequestMetadata'
      server:
        example: CN
        type: string
      source:
        description: Source describes a source of the report. Third-party API consumers
          should change this to their own name.
        example: your-app-name
        maxLength: 128
        type: string
      stageId:
        example: main_01-07
        type: string
      version:
        description: Version describes the version of the source app used to submit
          this report. Third-party API consumers should change this to their own app
          version.
        example: v0.0.0+0000000
        maxLength: 128
        type: string
    required:
    - server
    - source
    - stageId
    - version
    type: object
  v2.Activity:
    properties:
      end:
        type: integer
      existence:
        type: object
      label_i18n:
        type: object
      start:
        type: integer
    type: object
  v2.AdvancedQueryResult:
    properties:
      advanced_results:
        items: {}
        type: array
    type: object
  v2.DropInfo:
    properties:
      bounds:
        type: object
      dropType:
        type: string
      itemId:
        type: string
    type: object
  v2.DropMatrixQueryResult:
    properties:
      matrix:
        items:
          $ref: '#/definitions/v2.OneDropMatrixElement'
        type: array
    type: object
  v2.LoginResponse:
    properties:
      userID:
        type: string
    type: object
  v2.OneDrop:
    properties:
      itemId:
        example: "30012"
        type: string
      quantity:
        example: 1
        type: integer
    type: object
  v2.OneDropMatrixElement:
    properties:
      end:
        type: integer
      itemId:
        example: "30012"
        type: string
      quantity:
        example: 1322056
        type: integer
      stageId:
        example: main_01-07
        type: string
      start:
        example: 1556676000000
        type: integer
      stdDev:
        example: 0.114514
        type: number
      times:
        example: 1061347
        type: integer
    type: object
  v2.OneItemTrend:
    properties:
      quantity:
        items:
          type: integer
        type: array
      times:
        items:
          type: integer
        type: array
    type: object
  v2.OnePatternMatrixElement:
    properties:
      end:
        type: integer
        x-nullable: true
      pattern:
        $ref: '#/definitions/v2.Pattern'
      quantity:
        example: 159486
        type: integer
      stageId:
        example: main_01-07
        type: string
      start:
        example: 1633032000000
        type: integer
      times:
        example: 641734
        type: integer
    type: object
  v2.Pattern:
    properties:
      drops:
        items:
          $ref: '#/definitions/v2.OneDrop'
        type: array
    type: object
  v2.PatternMatrixQueryResult:
    properties:
      pattern_matrix:
        items:
          $ref: '#/definitions/v2.OnePatternMatrixElement'
        type: array
    type: object
  v2.RecognitionReportResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      taskId:
        example: 0522ce0083000000-1wE2I9dvMFXXzBMpSCYM81rJ0T3tLrAQ
        type: string
    type: object
  v2.ReportResponse:
    properties:
      reportHash:
        example: 0522ce0083000000-1wE2I9dvMFXXzBMpSCYM81rJ0T3tLrAQ
        type: string
    type: object
  v2.StageTrend:
    properties:
      results:
        additionalProperties:
          $ref: '#/definitions/v2.OneItemTrend'
        type: object
      startTime:
        type: integer
    type: object
  v2.TotalItemQuantity:
    properties:
      itemId:
        type: string
      quantity:
        type: integer
    type: object
  v2.TotalStageTime:
    properties:
      stageId:
        type: string
      times:
        type: integer
    type: object
  v2.TrendQueryResult:
    properties:
      trend:
        additionalProperties:
          $ref: '#/definitions/v2.StageTrend'
        type: object
    type: object
host: penguin-stats.io
info:
  contact:
    email: alvissreimu@gmail.com
    name: AlvISs_Reimu
    url: https://github.com/AlvISsReimu
  description: This is the Penguin Statistics v3 Backend, implemented for best performance,
    scalability, and reliability.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: Penguin Statistics API
  version: 3.0.0
paths:
  /PenguinStats/api/v2/config:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get FrontendConfig
      tags:
      - FrontendConfig
  /PenguinStats/api/v2/formula:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Formula
      tags:
      - Formula
  /PenguinStats/api/v2/items:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/exusiai_dev_backend-next_internal_model_v2.Item'
              - properties:
                  existence:
                    $ref: '#/definitions/model.Existence'
                  name_i18n:
                    $ref: '#/definitions/model.I18nString'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Items
      tags:
      - Item
  /PenguinStats/api/v2/items/{itemId}:
    get:
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/exusiai_dev_backend-next_internal_model_v2.Item'
            - properties:
                existence:
                  $ref: '#/definitions/model.Existence'
                name_i18n:
                  $ref: '#/definitions/model.I18nString'
              type: object
        "400":
          description: Invalid or missing itemId. Notice that this shall be the **string
            ID** of the item, instead of the internally used numerical ID of the item.
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get an Item with ID
      tags:
      - Item
  /PenguinStats/api/v2/notice:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Notice'
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Notices
      tags:
      - Notice
  /PenguinStats/api/v2/period:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/v2.Activity'
              - properties:
                  existence:
                    $ref: '#/definitions/model.Existence'
                  label_i18n:
                    $ref: '#/definitions/model.I18nString'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Event Periods
      tags:
      - EventPeriod
  /PenguinStats/api/v2/report:
    post:
      consumes:
      - application/json
      description: Submit a Drop Report. You can use the `reportHash` in the response
        to recall the report in 24 hours after it has been submitted.
      parameters:
      - description: Report request
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/types.SingularReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Report has been successfully submitted
          schema:
            $ref: '#/definitions/v2.ReportResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Submit a Drop Report
      tags:
      - Report
  /PenguinStats/api/v2/report/recall:
    post:
      consumes:
      - application/json
      description: Recall a Drop Report by its `reportHash`. The farest report you
        can recall is limited to 24 hours. Recalling a report after it has been already
        recalled will result in an error.
      parameters:
      - description: Report Recall request
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/types.SingularReportRecallRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Report has been successfully recalled
        "400":
          description: '`reportHash` is missing, invalid, or already been recalled.'
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Recall a Drop Report
      tags:
      - Report
  /PenguinStats/api/v2/report/recognition:
    post:
      description: Submit an Item Drop Report with Frontend Recognition. Notice that
        this is a **private API** and is not designed for external use.
      parameters:
      - description: Recognition Report Request
        in: body
        name: report
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Report has been successfully submitted for queue processing
          schema:
            $ref: '#/definitions/v2.RecognitionReportResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Bulk Submit with Frontend Recognition
      tags:
      - Report
  /PenguinStats/api/v2/result/advanced:
    post:
      parameters:
      - description: Query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/types.AdvancedQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Drop Matrix Response: when `interval` has been left undefined.'
          schema:
            allOf:
            - $ref: '#/definitions/v2.AdvancedQueryResult'
            - properties:
                advanced_results:
                  items:
                    $ref: '#/definitions/v2.DropMatrixQueryResult'
                  type: array
              type: object
        "202":
          description: 'Trend Response: when `interval` has been defined a value greater
            than `0`. Notice that this response still responds with a status code
            of `200`, but due to swagger limitations, to denote a different response
            with the same status code is not possible. Therefore, a status code of
            `202` is used, only for the purpose of workaround.'
          schema:
            allOf:
            - $ref: '#/definitions/v2.AdvancedQueryResult'
            - properties:
                advanced_results:
                  items:
                    $ref: '#/definitions/v2.TrendQueryResult'
                  type: array
              type: object
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Execute Advanced Query
      tags:
      - Result
  /PenguinStats/api/v2/result/matrix:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      - description: Whether to query for personal drop matrix or not. If `is_personal`
          equals to `true`, a valid PenguinID would be required to be provided (PenguinIDAuth)
        in: query
        name: is_personal
        type: boolean
      - description: Whether to show closed stages or not
        in: query
        name: show_closed_zones
        type: boolean
      - description: Category; default to all
        enum:
        - all
        - automated
        - manual
        in: query
        name: category
        type: string
      - collectionFormat: csv
        description: Comma separated list of stage IDs to filter
        in: query
        items:
          type: string
        name: stageFilter
        type: array
      - collectionFormat: csv
        description: Comma separated list of item IDs to filter
        in: query
        items:
          type: string
        name: itemFilter
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Drop Matrix response
          schema:
            $ref: '#/definitions/v2.DropMatrixQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Get Drop Matrix
      tags:
      - Result
  /PenguinStats/api/v2/result/pattern:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      - description: Whether to query for personal drop matrix or not. If `is_personal`
          equals to `true`, a valid PenguinID would be required to be provided (PenguinIDAuth)
        in: query
        name: is_personal
        type: boolean
      - description: Show all patterns; default to false
        in: query
        name: showAllPatterns
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.PatternMatrixQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Get Pattern Matrix
      tags:
      - Result
  /PenguinStats/api/v2/result/trends:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.TrendQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Trends
      tags:
      - Result
  /PenguinStats/api/v2/stages:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/exusiai_dev_backend-next_internal_model_v2.Stage'
              - properties:
                  code_i18n:
                    $ref: '#/definitions/model.I18nString'
                  existence:
                    $ref: '#/definitions/model.Existence'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Stages
      tags:
      - Stage
  /PenguinStats/api/v2/stages/{stageId}:
    get:
      parameters:
      - description: Stage ID
        in: path
        name: stageId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/exusiai_dev_backend-next_internal_model_v2.Stage'
            - properties:
                code_i18n:
                  $ref: '#/definitions/model.I18nString'
                existence:
                  $ref: '#/definitions/model.Existence'
              type: object
        "400":
          description: Invalid or missing stageId. Notice that this shall be the **string
            ID** of the stage, instead of the internally used numerical ID of the
            stage.
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get a Stage with ID
      tags:
      - Stage
  /PenguinStats/api/v2/stats:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exusiai_dev_backend-next_internal_model_v2.SiteStats'
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Site Stats
      tags:
      - SiteStats
  /PenguinStats/api/v2/users:
    post:
      consumes:
      - text/plain
      parameters:
      - description: User ID
        in: body
        name: userId
        required: true
        schema:
          type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: 'User ID. In the deprecated backend this is, for some reason,
            been implemented to return a JSON in the response body but with a `Content-Type:
            text/plain` in the response header instead of the correct `Content-Type:
            application/json`. So the v2 API has replicated this behavior to ensure
            compatibility.'
          schema:
            $ref: '#/definitions/v2.LoginResponse'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Login with PenguinID
      tags:
      - Account
  /PenguinStats/api/v2/zones:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/exusiai_dev_backend-next_internal_model_v2.Zone'
              - properties:
                  existence:
                    $ref: '#/definitions/model.Existence'
                  zoneName_i18n:
                    $ref: '#/definitions/model.I18nString'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Zones
      tags:
      - Zone
  /PenguinStats/api/v2/zones/{zoneId}:
    get:
      parameters:
      - description: Zone ID
        in: path
        name: zoneId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/exusiai_dev_backend-next_internal_model_v2.Zone'
            - properties:
                existence:
                  $ref: '#/definitions/model.Existence'
                zoneName_i18n:
                  $ref: '#/definitions/model.I18nString'
              type: object
        "400":
          description: Invalid or missing zoneId. Notice that this shall be the **string
            ID** of the zone, instead of the v3 API internally used numerical ID of
            the zone.
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get a Zone with ID
      tags:
      - Zone
schemes:
- https
securityDefinitions:
  PenguinIDAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
